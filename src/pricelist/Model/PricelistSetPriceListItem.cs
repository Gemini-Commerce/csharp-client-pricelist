/*
 * PriceList Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pricelist.Client.OpenAPIDateConverter;

namespace pricelist.Model
{
    /// <summary>
    /// PricelistSetPriceListItem
    /// </summary>
    [DataContract(Name = "pricelistSetPriceListItem")]
    public partial class PricelistSetPriceListItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PricelistSetPriceListItem" /> class.
        /// </summary>
        /// <param name="itemGrn">itemGrn.</param>
        /// <param name="basePrice">basePrice.</param>
        /// <param name="priceItems">priceItems.</param>
        /// <param name="hasTierPrices">hasTierPrices.</param>
        public PricelistSetPriceListItem(string itemGrn = default(string), PricelistMoney basePrice = default(PricelistMoney), List<PricelistSetPriceListItemPrice> priceItems = default(List<PricelistSetPriceListItemPrice>), bool hasTierPrices = default(bool))
        {
            this.ItemGrn = itemGrn;
            this.BasePrice = basePrice;
            this.PriceItems = priceItems;
            this.HasTierPrices = hasTierPrices;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets ItemGrn
        /// </summary>
        [DataMember(Name = "itemGrn", EmitDefaultValue = false)]
        public string ItemGrn { get; set; }

        /// <summary>
        /// Gets or Sets BasePrice
        /// </summary>
        [DataMember(Name = "basePrice", EmitDefaultValue = false)]
        public PricelistMoney BasePrice { get; set; }

        /// <summary>
        /// Gets or Sets PriceItems
        /// </summary>
        [DataMember(Name = "priceItems", EmitDefaultValue = false)]
        public List<PricelistSetPriceListItemPrice> PriceItems { get; set; }

        /// <summary>
        /// Gets or Sets HasTierPrices
        /// </summary>
        [DataMember(Name = "hasTierPrices", EmitDefaultValue = true)]
        public bool HasTierPrices { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PricelistSetPriceListItem {\n");
            sb.Append("  ItemGrn: ").Append(ItemGrn).Append("\n");
            sb.Append("  BasePrice: ").Append(BasePrice).Append("\n");
            sb.Append("  PriceItems: ").Append(PriceItems).Append("\n");
            sb.Append("  HasTierPrices: ").Append(HasTierPrices).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
