/*
 * PriceList Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pricelist.Client.OpenAPIDateConverter;

namespace pricelist.Model
{
    /// <summary>
    /// ListPriceListsRequestFilter
    /// </summary>
    [DataContract(Name = "ListPriceListsRequestFilter")]
    public partial class ListPriceListsRequestFilter : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListPriceListsRequestFilter" /> class.
        /// </summary>
        /// <param name="code">code.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="isDefault">isDefault.</param>
        /// <param name="currencyFilter">currencyFilter.</param>
        /// <param name="vatIncluded">vatIncluded.</param>
        /// <param name="deliveredDutyPaid">deliveredDutyPaid.</param>
        /// <param name="segmentsFilter">segmentsFilter.</param>
        /// <param name="marketsFilter">marketsFilter.</param>
        /// <param name="channelsFilter">channelsFilter.</param>
        /// <param name="typeFilter">typeFilter.</param>
        /// <param name="isSystem">isSystem.</param>
        public ListPriceListsRequestFilter(string code = default(string), string name = default(string), string description = default(string), bool isActive = default(bool), bool isDefault = default(bool), PricelistCurrencyFilter currencyFilter = default(PricelistCurrencyFilter), bool vatIncluded = default(bool), bool deliveredDutyPaid = default(bool), PricelistSegmentFilter segmentsFilter = default(PricelistSegmentFilter), PricelistMarketFilter marketsFilter = default(PricelistMarketFilter), PricelistChannelFilter channelsFilter = default(PricelistChannelFilter), PricelistPriceListTypeFilter typeFilter = default(PricelistPriceListTypeFilter), bool isSystem = default(bool))
        {
            this.Code = code;
            this.Name = name;
            this.Description = description;
            this.IsActive = isActive;
            this.IsDefault = isDefault;
            this.CurrencyFilter = currencyFilter;
            this.VatIncluded = vatIncluded;
            this.DeliveredDutyPaid = deliveredDutyPaid;
            this.SegmentsFilter = segmentsFilter;
            this.MarketsFilter = marketsFilter;
            this.ChannelsFilter = channelsFilter;
            this.TypeFilter = typeFilter;
            this.IsSystem = isSystem;
        }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name = "isActive", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsDefault
        /// </summary>
        [DataMember(Name = "isDefault", EmitDefaultValue = true)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyFilter
        /// </summary>
        [DataMember(Name = "currencyFilter", EmitDefaultValue = false)]
        public PricelistCurrencyFilter CurrencyFilter { get; set; }

        /// <summary>
        /// Gets or Sets VatIncluded
        /// </summary>
        [DataMember(Name = "vatIncluded", EmitDefaultValue = true)]
        public bool VatIncluded { get; set; }

        /// <summary>
        /// Gets or Sets DeliveredDutyPaid
        /// </summary>
        [DataMember(Name = "deliveredDutyPaid", EmitDefaultValue = true)]
        public bool DeliveredDutyPaid { get; set; }

        /// <summary>
        /// Gets or Sets SegmentsFilter
        /// </summary>
        [DataMember(Name = "segmentsFilter", EmitDefaultValue = false)]
        public PricelistSegmentFilter SegmentsFilter { get; set; }

        /// <summary>
        /// Gets or Sets MarketsFilter
        /// </summary>
        [DataMember(Name = "marketsFilter", EmitDefaultValue = false)]
        public PricelistMarketFilter MarketsFilter { get; set; }

        /// <summary>
        /// Gets or Sets ChannelsFilter
        /// </summary>
        [DataMember(Name = "channelsFilter", EmitDefaultValue = false)]
        public PricelistChannelFilter ChannelsFilter { get; set; }

        /// <summary>
        /// Gets or Sets TypeFilter
        /// </summary>
        [DataMember(Name = "typeFilter", EmitDefaultValue = false)]
        public PricelistPriceListTypeFilter TypeFilter { get; set; }

        /// <summary>
        /// Gets or Sets IsSystem
        /// </summary>
        [DataMember(Name = "isSystem", EmitDefaultValue = true)]
        public bool IsSystem { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListPriceListsRequestFilter {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  CurrencyFilter: ").Append(CurrencyFilter).Append("\n");
            sb.Append("  VatIncluded: ").Append(VatIncluded).Append("\n");
            sb.Append("  DeliveredDutyPaid: ").Append(DeliveredDutyPaid).Append("\n");
            sb.Append("  SegmentsFilter: ").Append(SegmentsFilter).Append("\n");
            sb.Append("  MarketsFilter: ").Append(MarketsFilter).Append("\n");
            sb.Append("  ChannelsFilter: ").Append(ChannelsFilter).Append("\n");
            sb.Append("  TypeFilter: ").Append(TypeFilter).Append("\n");
            sb.Append("  IsSystem: ").Append(IsSystem).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
