/*
 * PriceList Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using pricelist.Client;
using pricelist.Client.Auth;
using pricelist.Model;

namespace pricelist.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPriceListApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create new list
        /// </summary>
        /// <remarks>
        /// Allows the creation of a new price list with specified details such as code, name, currency, and type.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistCreatePriceListResponse</returns>
        PricelistCreatePriceListResponse CreatePriceList(PricelistCreatePriceListRequest body, int operationIndex = 0);

        /// <summary>
        /// Create new list
        /// </summary>
        /// <remarks>
        /// Allows the creation of a new price list with specified details such as code, name, currency, and type.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistCreatePriceListResponse</returns>
        ApiResponse<PricelistCreatePriceListResponse> CreatePriceListWithHttpInfo(PricelistCreatePriceListRequest body, int operationIndex = 0);
        /// <summary>
        /// Get prices for items
        /// </summary>
        /// <remarks>
        /// Deletes specified items from a price list based on their unique identifiers.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object DeletePriceListItems(PricelistDeletePriceListItemsRequest body, int operationIndex = 0);

        /// <summary>
        /// Get prices for items
        /// </summary>
        /// <remarks>
        /// Deletes specified items from a price list based on their unique identifiers.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeletePriceListItemsWithHttpInfo(PricelistDeletePriceListItemsRequest body, int operationIndex = 0);
        /// <summary>
        /// List detailed items
        /// </summary>
        /// <remarks>
        /// Fetches detailed information about items, including historical price data, for a specific price list.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistGetFullPriceItemsResponse</returns>
        PricelistGetFullPriceItemsResponse GetFullPriceItemsByPricelistId(PricelistGetFullPriceItemsRequest body, int operationIndex = 0);

        /// <summary>
        /// List detailed items
        /// </summary>
        /// <remarks>
        /// Fetches detailed information about items, including historical price data, for a specific price list.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistGetFullPriceItemsResponse</returns>
        ApiResponse<PricelistGetFullPriceItemsResponse> GetFullPriceItemsByPricelistIdWithHttpInfo(PricelistGetFullPriceItemsRequest body, int operationIndex = 0);
        /// <summary>
        /// Get specific list
        /// </summary>
        /// <remarks>
        /// Returns information about a particular price list identified by tenant ID and price list ID. The response includes details such as code, name, currency, and type.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistGetPriceListResponse</returns>
        PricelistGetPriceListResponse GetPriceList(PricelistGetPriceListRequest body, int operationIndex = 0);

        /// <summary>
        /// Get specific list
        /// </summary>
        /// <remarks>
        /// Returns information about a particular price list identified by tenant ID and price list ID. The response includes details such as code, name, currency, and type.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistGetPriceListResponse</returns>
        ApiResponse<PricelistGetPriceListResponse> GetPriceListWithHttpInfo(PricelistGetPriceListRequest body, int operationIndex = 0);
        /// <summary>
        /// Get list by code
        /// </summary>
        /// <remarks>
        /// Retrieves information about a specific price list using the unique code associated with it. The response includes details such as code, name, currency, and type.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistGetPriceListByCodeResponse</returns>
        PricelistGetPriceListByCodeResponse GetPriceListByCode(PricelistGetPriceListByCodeRequest body, int operationIndex = 0);

        /// <summary>
        /// Get list by code
        /// </summary>
        /// <remarks>
        /// Retrieves information about a specific price list using the unique code associated with it. The response includes details such as code, name, currency, and type.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistGetPriceListByCodeResponse</returns>
        ApiResponse<PricelistGetPriceListByCodeResponse> GetPriceListByCodeWithHttpInfo(PricelistGetPriceListByCodeRequest body, int operationIndex = 0);
        /// <summary>
        /// Get items in list
        /// </summary>
        /// <remarks>
        /// Fetches a paginated list of items associated with a particular price list.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistGetPriceListItemsResponse</returns>
        PricelistGetPriceListItemsResponse GetPriceListItems(PricelistGetPriceListItemsRequest body, int operationIndex = 0);

        /// <summary>
        /// Get items in list
        /// </summary>
        /// <remarks>
        /// Fetches a paginated list of items associated with a particular price list.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistGetPriceListItemsResponse</returns>
        ApiResponse<PricelistGetPriceListItemsResponse> GetPriceListItemsWithHttpInfo(PricelistGetPriceListItemsRequest body, int operationIndex = 0);
        /// <summary>
        /// Get detailed items
        /// </summary>
        /// <remarks>
        /// Retrieves the current prices of specified items considering the provided context, such as currency and market.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistGetPricesResponse</returns>
        PricelistGetPricesResponse GetPricesItems(PricelistGetPricesRequest body, int operationIndex = 0);

        /// <summary>
        /// Get detailed items
        /// </summary>
        /// <remarks>
        /// Retrieves the current prices of specified items considering the provided context, such as currency and market.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistGetPricesResponse</returns>
        ApiResponse<PricelistGetPricesResponse> GetPricesItemsWithHttpInfo(PricelistGetPricesRequest body, int operationIndex = 0);
        /// <summary>
        /// List detailed price items for a specific price list
        /// </summary>
        /// <remarks>
        /// Retrieves a paginated list of detailed price items, including historical data, for a specific price list.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistListFullPriceItemsResponse</returns>
        PricelistListFullPriceItemsResponse ListFullPriceItemsByPricelistId(PricelistListFullPriceItemsRequest body, int operationIndex = 0);

        /// <summary>
        /// List detailed price items for a specific price list
        /// </summary>
        /// <remarks>
        /// Retrieves a paginated list of detailed price items, including historical data, for a specific price list.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistListFullPriceItemsResponse</returns>
        ApiResponse<PricelistListFullPriceItemsResponse> ListFullPriceItemsByPricelistIdWithHttpInfo(PricelistListFullPriceItemsRequest body, int operationIndex = 0);
        /// <summary>
        /// List all price lists
        /// </summary>
        /// <remarks>
        /// Retrieves a list of price lists based on optional filters such as name, code, and other attributes. The response includes details such as code, name, currency, and type.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistListPriceListsResponse</returns>
        PricelistListPriceListsResponse ListPriceLists(PricelistListPriceListsRequest body, int operationIndex = 0);

        /// <summary>
        /// List all price lists
        /// </summary>
        /// <remarks>
        /// Retrieves a list of price lists based on optional filters such as name, code, and other attributes. The response includes details such as code, name, currency, and type.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistListPriceListsResponse</returns>
        ApiResponse<PricelistListPriceListsResponse> ListPriceListsWithHttpInfo(PricelistListPriceListsRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistGetPriceItemsByPriceListItemIdsResponse</returns>
        PricelistGetPriceItemsByPriceListItemIdsResponse PriceListGetPriceItemsByPriceListItemIds(PricelistGetPriceItemsByPriceListItemIdsRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistGetPriceItemsByPriceListItemIdsResponse</returns>
        ApiResponse<PricelistGetPriceItemsByPriceListItemIdsResponse> PriceListGetPriceItemsByPriceListItemIdsWithHttpInfo(PricelistGetPriceItemsByPriceListItemIdsRequest body, int operationIndex = 0);
        /// <summary>
        /// Set items in list
        /// </summary>
        /// <remarks>
        /// Updates or creates items for a given price list, allowing bulk modifications.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistSetPriceListItemsResponse</returns>
        PricelistSetPriceListItemsResponse SetPriceListItems(PricelistSetPriceListItemsRequest body, int operationIndex = 0);

        /// <summary>
        /// Set items in list
        /// </summary>
        /// <remarks>
        /// Updates or creates items for a given price list, allowing bulk modifications.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistSetPriceListItemsResponse</returns>
        ApiResponse<PricelistSetPriceListItemsResponse> SetPriceListItemsWithHttpInfo(PricelistSetPriceListItemsRequest body, int operationIndex = 0);
        /// <summary>
        /// Update list
        /// </summary>
        /// <remarks>
        /// Modifies the attributes of an existing price list based on the provided payload and field mask. The field mask is used to specify which attributes of the price list are to be updated. The field mask is a comma-separated list of fully qualified names of fields. Example: &#x60;code,name,currency,type&#x60;
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object UpdatePriceList(PricelistUpdatePriceListRequest body, int operationIndex = 0);

        /// <summary>
        /// Update list
        /// </summary>
        /// <remarks>
        /// Modifies the attributes of an existing price list based on the provided payload and field mask. The field mask is used to specify which attributes of the price list are to be updated. The field mask is a comma-separated list of fully qualified names of fields. Example: &#x60;code,name,currency,type&#x60;
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdatePriceListWithHttpInfo(PricelistUpdatePriceListRequest body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPriceListApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create new list
        /// </summary>
        /// <remarks>
        /// Allows the creation of a new price list with specified details such as code, name, currency, and type.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistCreatePriceListResponse</returns>
        System.Threading.Tasks.Task<PricelistCreatePriceListResponse> CreatePriceListAsync(PricelistCreatePriceListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create new list
        /// </summary>
        /// <remarks>
        /// Allows the creation of a new price list with specified details such as code, name, currency, and type.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistCreatePriceListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricelistCreatePriceListResponse>> CreatePriceListWithHttpInfoAsync(PricelistCreatePriceListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get prices for items
        /// </summary>
        /// <remarks>
        /// Deletes specified items from a price list based on their unique identifiers.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeletePriceListItemsAsync(PricelistDeletePriceListItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get prices for items
        /// </summary>
        /// <remarks>
        /// Deletes specified items from a price list based on their unique identifiers.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePriceListItemsWithHttpInfoAsync(PricelistDeletePriceListItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List detailed items
        /// </summary>
        /// <remarks>
        /// Fetches detailed information about items, including historical price data, for a specific price list.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistGetFullPriceItemsResponse</returns>
        System.Threading.Tasks.Task<PricelistGetFullPriceItemsResponse> GetFullPriceItemsByPricelistIdAsync(PricelistGetFullPriceItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List detailed items
        /// </summary>
        /// <remarks>
        /// Fetches detailed information about items, including historical price data, for a specific price list.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistGetFullPriceItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricelistGetFullPriceItemsResponse>> GetFullPriceItemsByPricelistIdWithHttpInfoAsync(PricelistGetFullPriceItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get specific list
        /// </summary>
        /// <remarks>
        /// Returns information about a particular price list identified by tenant ID and price list ID. The response includes details such as code, name, currency, and type.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistGetPriceListResponse</returns>
        System.Threading.Tasks.Task<PricelistGetPriceListResponse> GetPriceListAsync(PricelistGetPriceListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get specific list
        /// </summary>
        /// <remarks>
        /// Returns information about a particular price list identified by tenant ID and price list ID. The response includes details such as code, name, currency, and type.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistGetPriceListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricelistGetPriceListResponse>> GetPriceListWithHttpInfoAsync(PricelistGetPriceListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get list by code
        /// </summary>
        /// <remarks>
        /// Retrieves information about a specific price list using the unique code associated with it. The response includes details such as code, name, currency, and type.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistGetPriceListByCodeResponse</returns>
        System.Threading.Tasks.Task<PricelistGetPriceListByCodeResponse> GetPriceListByCodeAsync(PricelistGetPriceListByCodeRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get list by code
        /// </summary>
        /// <remarks>
        /// Retrieves information about a specific price list using the unique code associated with it. The response includes details such as code, name, currency, and type.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistGetPriceListByCodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricelistGetPriceListByCodeResponse>> GetPriceListByCodeWithHttpInfoAsync(PricelistGetPriceListByCodeRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get items in list
        /// </summary>
        /// <remarks>
        /// Fetches a paginated list of items associated with a particular price list.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistGetPriceListItemsResponse</returns>
        System.Threading.Tasks.Task<PricelistGetPriceListItemsResponse> GetPriceListItemsAsync(PricelistGetPriceListItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get items in list
        /// </summary>
        /// <remarks>
        /// Fetches a paginated list of items associated with a particular price list.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistGetPriceListItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricelistGetPriceListItemsResponse>> GetPriceListItemsWithHttpInfoAsync(PricelistGetPriceListItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get detailed items
        /// </summary>
        /// <remarks>
        /// Retrieves the current prices of specified items considering the provided context, such as currency and market.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistGetPricesResponse</returns>
        System.Threading.Tasks.Task<PricelistGetPricesResponse> GetPricesItemsAsync(PricelistGetPricesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get detailed items
        /// </summary>
        /// <remarks>
        /// Retrieves the current prices of specified items considering the provided context, such as currency and market.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistGetPricesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricelistGetPricesResponse>> GetPricesItemsWithHttpInfoAsync(PricelistGetPricesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List detailed price items for a specific price list
        /// </summary>
        /// <remarks>
        /// Retrieves a paginated list of detailed price items, including historical data, for a specific price list.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistListFullPriceItemsResponse</returns>
        System.Threading.Tasks.Task<PricelistListFullPriceItemsResponse> ListFullPriceItemsByPricelistIdAsync(PricelistListFullPriceItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List detailed price items for a specific price list
        /// </summary>
        /// <remarks>
        /// Retrieves a paginated list of detailed price items, including historical data, for a specific price list.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistListFullPriceItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricelistListFullPriceItemsResponse>> ListFullPriceItemsByPricelistIdWithHttpInfoAsync(PricelistListFullPriceItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all price lists
        /// </summary>
        /// <remarks>
        /// Retrieves a list of price lists based on optional filters such as name, code, and other attributes. The response includes details such as code, name, currency, and type.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistListPriceListsResponse</returns>
        System.Threading.Tasks.Task<PricelistListPriceListsResponse> ListPriceListsAsync(PricelistListPriceListsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all price lists
        /// </summary>
        /// <remarks>
        /// Retrieves a list of price lists based on optional filters such as name, code, and other attributes. The response includes details such as code, name, currency, and type.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistListPriceListsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricelistListPriceListsResponse>> ListPriceListsWithHttpInfoAsync(PricelistListPriceListsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistGetPriceItemsByPriceListItemIdsResponse</returns>
        System.Threading.Tasks.Task<PricelistGetPriceItemsByPriceListItemIdsResponse> PriceListGetPriceItemsByPriceListItemIdsAsync(PricelistGetPriceItemsByPriceListItemIdsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistGetPriceItemsByPriceListItemIdsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricelistGetPriceItemsByPriceListItemIdsResponse>> PriceListGetPriceItemsByPriceListItemIdsWithHttpInfoAsync(PricelistGetPriceItemsByPriceListItemIdsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set items in list
        /// </summary>
        /// <remarks>
        /// Updates or creates items for a given price list, allowing bulk modifications.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistSetPriceListItemsResponse</returns>
        System.Threading.Tasks.Task<PricelistSetPriceListItemsResponse> SetPriceListItemsAsync(PricelistSetPriceListItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set items in list
        /// </summary>
        /// <remarks>
        /// Updates or creates items for a given price list, allowing bulk modifications.
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistSetPriceListItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricelistSetPriceListItemsResponse>> SetPriceListItemsWithHttpInfoAsync(PricelistSetPriceListItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update list
        /// </summary>
        /// <remarks>
        /// Modifies the attributes of an existing price list based on the provided payload and field mask. The field mask is used to specify which attributes of the price list are to be updated. The field mask is a comma-separated list of fully qualified names of fields. Example: &#x60;code,name,currency,type&#x60;
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdatePriceListAsync(PricelistUpdatePriceListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update list
        /// </summary>
        /// <remarks>
        /// Modifies the attributes of an existing price list based on the provided payload and field mask. The field mask is used to specify which attributes of the price list are to be updated. The field mask is a comma-separated list of fully qualified names of fields. Example: &#x60;code,name,currency,type&#x60;
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePriceListWithHttpInfoAsync(PricelistUpdatePriceListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPriceListApi : IPriceListApiSync, IPriceListApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PriceListApi : IPriceListApi
    {
        private pricelist.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PriceListApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PriceListApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PriceListApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PriceListApi(string basePath)
        {
            this.Configuration = pricelist.Client.Configuration.MergeConfigurations(
                pricelist.Client.GlobalConfiguration.Instance,
                new pricelist.Client.Configuration { BasePath = basePath }
            );
            this.Client = new pricelist.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new pricelist.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = pricelist.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PriceListApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PriceListApi(pricelist.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = pricelist.Client.Configuration.MergeConfigurations(
                pricelist.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new pricelist.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new pricelist.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = pricelist.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PriceListApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PriceListApi(pricelist.Client.ISynchronousClient client, pricelist.Client.IAsynchronousClient asyncClient, pricelist.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = pricelist.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public pricelist.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public pricelist.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public pricelist.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public pricelist.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create new list Allows the creation of a new price list with specified details such as code, name, currency, and type.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistCreatePriceListResponse</returns>
        public PricelistCreatePriceListResponse CreatePriceList(PricelistCreatePriceListRequest body, int operationIndex = 0)
        {
            pricelist.Client.ApiResponse<PricelistCreatePriceListResponse> localVarResponse = CreatePriceListWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new list Allows the creation of a new price list with specified details such as code, name, currency, and type.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistCreatePriceListResponse</returns>
        public pricelist.Client.ApiResponse<PricelistCreatePriceListResponse> CreatePriceListWithHttpInfo(PricelistCreatePriceListRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->CreatePriceList");
            }

            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.CreatePriceList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PricelistCreatePriceListResponse>("/pricelist.PriceList/CreatePriceList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePriceList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new list Allows the creation of a new price list with specified details such as code, name, currency, and type.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistCreatePriceListResponse</returns>
        public async System.Threading.Tasks.Task<PricelistCreatePriceListResponse> CreatePriceListAsync(PricelistCreatePriceListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricelist.Client.ApiResponse<PricelistCreatePriceListResponse> localVarResponse = await CreatePriceListWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new list Allows the creation of a new price list with specified details such as code, name, currency, and type.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistCreatePriceListResponse)</returns>
        public async System.Threading.Tasks.Task<pricelist.Client.ApiResponse<PricelistCreatePriceListResponse>> CreatePriceListWithHttpInfoAsync(PricelistCreatePriceListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->CreatePriceList");
            }


            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.CreatePriceList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PricelistCreatePriceListResponse>("/pricelist.PriceList/CreatePriceList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePriceList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get prices for items Deletes specified items from a price list based on their unique identifiers.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object DeletePriceListItems(PricelistDeletePriceListItemsRequest body, int operationIndex = 0)
        {
            pricelist.Client.ApiResponse<Object> localVarResponse = DeletePriceListItemsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get prices for items Deletes specified items from a price list based on their unique identifiers.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public pricelist.Client.ApiResponse<Object> DeletePriceListItemsWithHttpInfo(PricelistDeletePriceListItemsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->DeletePriceListItems");
            }

            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.DeletePriceListItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pricelist.PriceList/DeletePriceListItems", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePriceListItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get prices for items Deletes specified items from a price list based on their unique identifiers.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeletePriceListItemsAsync(PricelistDeletePriceListItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricelist.Client.ApiResponse<Object> localVarResponse = await DeletePriceListItemsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get prices for items Deletes specified items from a price list based on their unique identifiers.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<pricelist.Client.ApiResponse<Object>> DeletePriceListItemsWithHttpInfoAsync(PricelistDeletePriceListItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->DeletePriceListItems");
            }


            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.DeletePriceListItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pricelist.PriceList/DeletePriceListItems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePriceListItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List detailed items Fetches detailed information about items, including historical price data, for a specific price list.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistGetFullPriceItemsResponse</returns>
        public PricelistGetFullPriceItemsResponse GetFullPriceItemsByPricelistId(PricelistGetFullPriceItemsRequest body, int operationIndex = 0)
        {
            pricelist.Client.ApiResponse<PricelistGetFullPriceItemsResponse> localVarResponse = GetFullPriceItemsByPricelistIdWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List detailed items Fetches detailed information about items, including historical price data, for a specific price list.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistGetFullPriceItemsResponse</returns>
        public pricelist.Client.ApiResponse<PricelistGetFullPriceItemsResponse> GetFullPriceItemsByPricelistIdWithHttpInfo(PricelistGetFullPriceItemsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->GetFullPriceItemsByPricelistId");
            }

            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.GetFullPriceItemsByPricelistId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PricelistGetFullPriceItemsResponse>("/pricelist.PriceList/GetFullPriceItemsByPricelistId", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFullPriceItemsByPricelistId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List detailed items Fetches detailed information about items, including historical price data, for a specific price list.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistGetFullPriceItemsResponse</returns>
        public async System.Threading.Tasks.Task<PricelistGetFullPriceItemsResponse> GetFullPriceItemsByPricelistIdAsync(PricelistGetFullPriceItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricelist.Client.ApiResponse<PricelistGetFullPriceItemsResponse> localVarResponse = await GetFullPriceItemsByPricelistIdWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List detailed items Fetches detailed information about items, including historical price data, for a specific price list.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistGetFullPriceItemsResponse)</returns>
        public async System.Threading.Tasks.Task<pricelist.Client.ApiResponse<PricelistGetFullPriceItemsResponse>> GetFullPriceItemsByPricelistIdWithHttpInfoAsync(PricelistGetFullPriceItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->GetFullPriceItemsByPricelistId");
            }


            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.GetFullPriceItemsByPricelistId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PricelistGetFullPriceItemsResponse>("/pricelist.PriceList/GetFullPriceItemsByPricelistId", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFullPriceItemsByPricelistId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specific list Returns information about a particular price list identified by tenant ID and price list ID. The response includes details such as code, name, currency, and type.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistGetPriceListResponse</returns>
        public PricelistGetPriceListResponse GetPriceList(PricelistGetPriceListRequest body, int operationIndex = 0)
        {
            pricelist.Client.ApiResponse<PricelistGetPriceListResponse> localVarResponse = GetPriceListWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get specific list Returns information about a particular price list identified by tenant ID and price list ID. The response includes details such as code, name, currency, and type.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistGetPriceListResponse</returns>
        public pricelist.Client.ApiResponse<PricelistGetPriceListResponse> GetPriceListWithHttpInfo(PricelistGetPriceListRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->GetPriceList");
            }

            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.GetPriceList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PricelistGetPriceListResponse>("/pricelist.PriceList/GetPriceList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPriceList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specific list Returns information about a particular price list identified by tenant ID and price list ID. The response includes details such as code, name, currency, and type.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistGetPriceListResponse</returns>
        public async System.Threading.Tasks.Task<PricelistGetPriceListResponse> GetPriceListAsync(PricelistGetPriceListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricelist.Client.ApiResponse<PricelistGetPriceListResponse> localVarResponse = await GetPriceListWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get specific list Returns information about a particular price list identified by tenant ID and price list ID. The response includes details such as code, name, currency, and type.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistGetPriceListResponse)</returns>
        public async System.Threading.Tasks.Task<pricelist.Client.ApiResponse<PricelistGetPriceListResponse>> GetPriceListWithHttpInfoAsync(PricelistGetPriceListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->GetPriceList");
            }


            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.GetPriceList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PricelistGetPriceListResponse>("/pricelist.PriceList/GetPriceList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPriceList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list by code Retrieves information about a specific price list using the unique code associated with it. The response includes details such as code, name, currency, and type.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistGetPriceListByCodeResponse</returns>
        public PricelistGetPriceListByCodeResponse GetPriceListByCode(PricelistGetPriceListByCodeRequest body, int operationIndex = 0)
        {
            pricelist.Client.ApiResponse<PricelistGetPriceListByCodeResponse> localVarResponse = GetPriceListByCodeWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list by code Retrieves information about a specific price list using the unique code associated with it. The response includes details such as code, name, currency, and type.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistGetPriceListByCodeResponse</returns>
        public pricelist.Client.ApiResponse<PricelistGetPriceListByCodeResponse> GetPriceListByCodeWithHttpInfo(PricelistGetPriceListByCodeRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->GetPriceListByCode");
            }

            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.GetPriceListByCode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PricelistGetPriceListByCodeResponse>("/pricelist.PriceList/GetPriceListByCode", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPriceListByCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get list by code Retrieves information about a specific price list using the unique code associated with it. The response includes details such as code, name, currency, and type.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistGetPriceListByCodeResponse</returns>
        public async System.Threading.Tasks.Task<PricelistGetPriceListByCodeResponse> GetPriceListByCodeAsync(PricelistGetPriceListByCodeRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricelist.Client.ApiResponse<PricelistGetPriceListByCodeResponse> localVarResponse = await GetPriceListByCodeWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get list by code Retrieves information about a specific price list using the unique code associated with it. The response includes details such as code, name, currency, and type.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistGetPriceListByCodeResponse)</returns>
        public async System.Threading.Tasks.Task<pricelist.Client.ApiResponse<PricelistGetPriceListByCodeResponse>> GetPriceListByCodeWithHttpInfoAsync(PricelistGetPriceListByCodeRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->GetPriceListByCode");
            }


            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.GetPriceListByCode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PricelistGetPriceListByCodeResponse>("/pricelist.PriceList/GetPriceListByCode", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPriceListByCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get items in list Fetches a paginated list of items associated with a particular price list.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistGetPriceListItemsResponse</returns>
        public PricelistGetPriceListItemsResponse GetPriceListItems(PricelistGetPriceListItemsRequest body, int operationIndex = 0)
        {
            pricelist.Client.ApiResponse<PricelistGetPriceListItemsResponse> localVarResponse = GetPriceListItemsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get items in list Fetches a paginated list of items associated with a particular price list.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistGetPriceListItemsResponse</returns>
        public pricelist.Client.ApiResponse<PricelistGetPriceListItemsResponse> GetPriceListItemsWithHttpInfo(PricelistGetPriceListItemsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->GetPriceListItems");
            }

            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.GetPriceListItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PricelistGetPriceListItemsResponse>("/pricelist.PriceList/GetPriceListItems", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPriceListItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get items in list Fetches a paginated list of items associated with a particular price list.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistGetPriceListItemsResponse</returns>
        public async System.Threading.Tasks.Task<PricelistGetPriceListItemsResponse> GetPriceListItemsAsync(PricelistGetPriceListItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricelist.Client.ApiResponse<PricelistGetPriceListItemsResponse> localVarResponse = await GetPriceListItemsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get items in list Fetches a paginated list of items associated with a particular price list.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistGetPriceListItemsResponse)</returns>
        public async System.Threading.Tasks.Task<pricelist.Client.ApiResponse<PricelistGetPriceListItemsResponse>> GetPriceListItemsWithHttpInfoAsync(PricelistGetPriceListItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->GetPriceListItems");
            }


            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.GetPriceListItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PricelistGetPriceListItemsResponse>("/pricelist.PriceList/GetPriceListItems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPriceListItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get detailed items Retrieves the current prices of specified items considering the provided context, such as currency and market.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistGetPricesResponse</returns>
        public PricelistGetPricesResponse GetPricesItems(PricelistGetPricesRequest body, int operationIndex = 0)
        {
            pricelist.Client.ApiResponse<PricelistGetPricesResponse> localVarResponse = GetPricesItemsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get detailed items Retrieves the current prices of specified items considering the provided context, such as currency and market.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistGetPricesResponse</returns>
        public pricelist.Client.ApiResponse<PricelistGetPricesResponse> GetPricesItemsWithHttpInfo(PricelistGetPricesRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->GetPricesItems");
            }

            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.GetPricesItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PricelistGetPricesResponse>("/pricelist.PriceList/GetPricesItems", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricesItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get detailed items Retrieves the current prices of specified items considering the provided context, such as currency and market.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistGetPricesResponse</returns>
        public async System.Threading.Tasks.Task<PricelistGetPricesResponse> GetPricesItemsAsync(PricelistGetPricesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricelist.Client.ApiResponse<PricelistGetPricesResponse> localVarResponse = await GetPricesItemsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get detailed items Retrieves the current prices of specified items considering the provided context, such as currency and market.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistGetPricesResponse)</returns>
        public async System.Threading.Tasks.Task<pricelist.Client.ApiResponse<PricelistGetPricesResponse>> GetPricesItemsWithHttpInfoAsync(PricelistGetPricesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->GetPricesItems");
            }


            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.GetPricesItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PricelistGetPricesResponse>("/pricelist.PriceList/GetPricesItems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricesItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List detailed price items for a specific price list Retrieves a paginated list of detailed price items, including historical data, for a specific price list.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistListFullPriceItemsResponse</returns>
        public PricelistListFullPriceItemsResponse ListFullPriceItemsByPricelistId(PricelistListFullPriceItemsRequest body, int operationIndex = 0)
        {
            pricelist.Client.ApiResponse<PricelistListFullPriceItemsResponse> localVarResponse = ListFullPriceItemsByPricelistIdWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List detailed price items for a specific price list Retrieves a paginated list of detailed price items, including historical data, for a specific price list.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistListFullPriceItemsResponse</returns>
        public pricelist.Client.ApiResponse<PricelistListFullPriceItemsResponse> ListFullPriceItemsByPricelistIdWithHttpInfo(PricelistListFullPriceItemsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->ListFullPriceItemsByPricelistId");
            }

            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.ListFullPriceItemsByPricelistId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PricelistListFullPriceItemsResponse>("/pricelist.PriceList/ListFullPriceItemsByPricelistId", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFullPriceItemsByPricelistId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List detailed price items for a specific price list Retrieves a paginated list of detailed price items, including historical data, for a specific price list.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistListFullPriceItemsResponse</returns>
        public async System.Threading.Tasks.Task<PricelistListFullPriceItemsResponse> ListFullPriceItemsByPricelistIdAsync(PricelistListFullPriceItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricelist.Client.ApiResponse<PricelistListFullPriceItemsResponse> localVarResponse = await ListFullPriceItemsByPricelistIdWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List detailed price items for a specific price list Retrieves a paginated list of detailed price items, including historical data, for a specific price list.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistListFullPriceItemsResponse)</returns>
        public async System.Threading.Tasks.Task<pricelist.Client.ApiResponse<PricelistListFullPriceItemsResponse>> ListFullPriceItemsByPricelistIdWithHttpInfoAsync(PricelistListFullPriceItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->ListFullPriceItemsByPricelistId");
            }


            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.ListFullPriceItemsByPricelistId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PricelistListFullPriceItemsResponse>("/pricelist.PriceList/ListFullPriceItemsByPricelistId", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFullPriceItemsByPricelistId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all price lists Retrieves a list of price lists based on optional filters such as name, code, and other attributes. The response includes details such as code, name, currency, and type.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistListPriceListsResponse</returns>
        public PricelistListPriceListsResponse ListPriceLists(PricelistListPriceListsRequest body, int operationIndex = 0)
        {
            pricelist.Client.ApiResponse<PricelistListPriceListsResponse> localVarResponse = ListPriceListsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all price lists Retrieves a list of price lists based on optional filters such as name, code, and other attributes. The response includes details such as code, name, currency, and type.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistListPriceListsResponse</returns>
        public pricelist.Client.ApiResponse<PricelistListPriceListsResponse> ListPriceListsWithHttpInfo(PricelistListPriceListsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->ListPriceLists");
            }

            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.ListPriceLists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PricelistListPriceListsResponse>("/pricelist.PriceList/ListPriceLists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPriceLists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all price lists Retrieves a list of price lists based on optional filters such as name, code, and other attributes. The response includes details such as code, name, currency, and type.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistListPriceListsResponse</returns>
        public async System.Threading.Tasks.Task<PricelistListPriceListsResponse> ListPriceListsAsync(PricelistListPriceListsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricelist.Client.ApiResponse<PricelistListPriceListsResponse> localVarResponse = await ListPriceListsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all price lists Retrieves a list of price lists based on optional filters such as name, code, and other attributes. The response includes details such as code, name, currency, and type.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistListPriceListsResponse)</returns>
        public async System.Threading.Tasks.Task<pricelist.Client.ApiResponse<PricelistListPriceListsResponse>> ListPriceListsWithHttpInfoAsync(PricelistListPriceListsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->ListPriceLists");
            }


            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.ListPriceLists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PricelistListPriceListsResponse>("/pricelist.PriceList/ListPriceLists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPriceLists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistGetPriceItemsByPriceListItemIdsResponse</returns>
        public PricelistGetPriceItemsByPriceListItemIdsResponse PriceListGetPriceItemsByPriceListItemIds(PricelistGetPriceItemsByPriceListItemIdsRequest body, int operationIndex = 0)
        {
            pricelist.Client.ApiResponse<PricelistGetPriceItemsByPriceListItemIdsResponse> localVarResponse = PriceListGetPriceItemsByPriceListItemIdsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistGetPriceItemsByPriceListItemIdsResponse</returns>
        public pricelist.Client.ApiResponse<PricelistGetPriceItemsByPriceListItemIdsResponse> PriceListGetPriceItemsByPriceListItemIdsWithHttpInfo(PricelistGetPriceItemsByPriceListItemIdsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->PriceListGetPriceItemsByPriceListItemIds");
            }

            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.PriceListGetPriceItemsByPriceListItemIds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PricelistGetPriceItemsByPriceListItemIdsResponse>("/pricelist.PriceList/GetPriceItemsByPriceListItemIds", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceListGetPriceItemsByPriceListItemIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistGetPriceItemsByPriceListItemIdsResponse</returns>
        public async System.Threading.Tasks.Task<PricelistGetPriceItemsByPriceListItemIdsResponse> PriceListGetPriceItemsByPriceListItemIdsAsync(PricelistGetPriceItemsByPriceListItemIdsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricelist.Client.ApiResponse<PricelistGetPriceItemsByPriceListItemIdsResponse> localVarResponse = await PriceListGetPriceItemsByPriceListItemIdsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistGetPriceItemsByPriceListItemIdsResponse)</returns>
        public async System.Threading.Tasks.Task<pricelist.Client.ApiResponse<PricelistGetPriceItemsByPriceListItemIdsResponse>> PriceListGetPriceItemsByPriceListItemIdsWithHttpInfoAsync(PricelistGetPriceItemsByPriceListItemIdsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->PriceListGetPriceItemsByPriceListItemIds");
            }


            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.PriceListGetPriceItemsByPriceListItemIds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PricelistGetPriceItemsByPriceListItemIdsResponse>("/pricelist.PriceList/GetPriceItemsByPriceListItemIds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceListGetPriceItemsByPriceListItemIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set items in list Updates or creates items for a given price list, allowing bulk modifications.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistSetPriceListItemsResponse</returns>
        public PricelistSetPriceListItemsResponse SetPriceListItems(PricelistSetPriceListItemsRequest body, int operationIndex = 0)
        {
            pricelist.Client.ApiResponse<PricelistSetPriceListItemsResponse> localVarResponse = SetPriceListItemsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set items in list Updates or creates items for a given price list, allowing bulk modifications.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistSetPriceListItemsResponse</returns>
        public pricelist.Client.ApiResponse<PricelistSetPriceListItemsResponse> SetPriceListItemsWithHttpInfo(PricelistSetPriceListItemsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->SetPriceListItems");
            }

            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.SetPriceListItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PricelistSetPriceListItemsResponse>("/pricelist.PriceList/SetPriceListItems", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetPriceListItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set items in list Updates or creates items for a given price list, allowing bulk modifications.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistSetPriceListItemsResponse</returns>
        public async System.Threading.Tasks.Task<PricelistSetPriceListItemsResponse> SetPriceListItemsAsync(PricelistSetPriceListItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricelist.Client.ApiResponse<PricelistSetPriceListItemsResponse> localVarResponse = await SetPriceListItemsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set items in list Updates or creates items for a given price list, allowing bulk modifications.
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistSetPriceListItemsResponse)</returns>
        public async System.Threading.Tasks.Task<pricelist.Client.ApiResponse<PricelistSetPriceListItemsResponse>> SetPriceListItemsWithHttpInfoAsync(PricelistSetPriceListItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->SetPriceListItems");
            }


            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.SetPriceListItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PricelistSetPriceListItemsResponse>("/pricelist.PriceList/SetPriceListItems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetPriceListItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update list Modifies the attributes of an existing price list based on the provided payload and field mask. The field mask is used to specify which attributes of the price list are to be updated. The field mask is a comma-separated list of fully qualified names of fields. Example: &#x60;code,name,currency,type&#x60;
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object UpdatePriceList(PricelistUpdatePriceListRequest body, int operationIndex = 0)
        {
            pricelist.Client.ApiResponse<Object> localVarResponse = UpdatePriceListWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update list Modifies the attributes of an existing price list based on the provided payload and field mask. The field mask is used to specify which attributes of the price list are to be updated. The field mask is a comma-separated list of fully qualified names of fields. Example: &#x60;code,name,currency,type&#x60;
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public pricelist.Client.ApiResponse<Object> UpdatePriceListWithHttpInfo(PricelistUpdatePriceListRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->UpdatePriceList");
            }

            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.UpdatePriceList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pricelist.PriceList/UpdatePriceList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePriceList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update list Modifies the attributes of an existing price list based on the provided payload and field mask. The field mask is used to specify which attributes of the price list are to be updated. The field mask is a comma-separated list of fully qualified names of fields. Example: &#x60;code,name,currency,type&#x60;
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdatePriceListAsync(PricelistUpdatePriceListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricelist.Client.ApiResponse<Object> localVarResponse = await UpdatePriceListWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update list Modifies the attributes of an existing price list based on the provided payload and field mask. The field mask is used to specify which attributes of the price list are to be updated. The field mask is a comma-separated list of fully qualified names of fields. Example: &#x60;code,name,currency,type&#x60;
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<pricelist.Client.ApiResponse<Object>> UpdatePriceListWithHttpInfoAsync(PricelistUpdatePriceListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->UpdatePriceList");
            }


            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.UpdatePriceList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pricelist.PriceList/UpdatePriceList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePriceList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
