/*
 * pricelist/service.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using pricelist.Client;
using pricelist.Model;

namespace pricelist.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPriceListApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistCreatePriceListResponse</returns>
        PricelistCreatePriceListResponse PriceListCreatePriceList(PricelistCreatePriceListRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistCreatePriceListResponse</returns>
        ApiResponse<PricelistCreatePriceListResponse> PriceListCreatePriceListWithHttpInfo(PricelistCreatePriceListRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object PriceListDeletePriceListItems(PricelistDeletePriceListItemsRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PriceListDeletePriceListItemsWithHttpInfo(PricelistDeletePriceListItemsRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistGetFullPriceItemsResponse</returns>
        PricelistGetFullPriceItemsResponse PriceListGetFullPriceItemsByPricelistId(PricelistGetFullPriceItemsRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistGetFullPriceItemsResponse</returns>
        ApiResponse<PricelistGetFullPriceItemsResponse> PriceListGetFullPriceItemsByPricelistIdWithHttpInfo(PricelistGetFullPriceItemsRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistGetPriceItemsByPriceListItemIdsResponse</returns>
        PricelistGetPriceItemsByPriceListItemIdsResponse PriceListGetPriceItemsByPriceListItemIds(PricelistGetPriceItemsByPriceListItemIdsRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistGetPriceItemsByPriceListItemIdsResponse</returns>
        ApiResponse<PricelistGetPriceItemsByPriceListItemIdsResponse> PriceListGetPriceItemsByPriceListItemIdsWithHttpInfo(PricelistGetPriceItemsByPriceListItemIdsRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistGetPriceListResponse</returns>
        PricelistGetPriceListResponse PriceListGetPriceList(PricelistGetPriceListRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistGetPriceListResponse</returns>
        ApiResponse<PricelistGetPriceListResponse> PriceListGetPriceListWithHttpInfo(PricelistGetPriceListRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistGetPriceListByCodeResponse</returns>
        PricelistGetPriceListByCodeResponse PriceListGetPriceListByCode(PricelistGetPriceListByCodeRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistGetPriceListByCodeResponse</returns>
        ApiResponse<PricelistGetPriceListByCodeResponse> PriceListGetPriceListByCodeWithHttpInfo(PricelistGetPriceListByCodeRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistGetPriceListItemsResponse</returns>
        PricelistGetPriceListItemsResponse PriceListGetPriceListItems(PricelistGetPriceListItemsRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistGetPriceListItemsResponse</returns>
        ApiResponse<PricelistGetPriceListItemsResponse> PriceListGetPriceListItemsWithHttpInfo(PricelistGetPriceListItemsRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistGetPricesResponse</returns>
        PricelistGetPricesResponse PriceListGetPricesItems(PricelistGetPricesRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistGetPricesResponse</returns>
        ApiResponse<PricelistGetPricesResponse> PriceListGetPricesItemsWithHttpInfo(PricelistGetPricesRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistListFullPriceItemsResponse</returns>
        PricelistListFullPriceItemsResponse PriceListListFullPriceItemsByPricelistId(PricelistListFullPriceItemsRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistListFullPriceItemsResponse</returns>
        ApiResponse<PricelistListFullPriceItemsResponse> PriceListListFullPriceItemsByPricelistIdWithHttpInfo(PricelistListFullPriceItemsRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistListPriceListsResponse</returns>
        PricelistListPriceListsResponse PriceListListPriceLists(PricelistListPriceListsRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistListPriceListsResponse</returns>
        ApiResponse<PricelistListPriceListsResponse> PriceListListPriceListsWithHttpInfo(PricelistListPriceListsRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistSetPriceListItemsResponse</returns>
        PricelistSetPriceListItemsResponse PriceListSetPriceListItems(PricelistSetPriceListItemsRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistSetPriceListItemsResponse</returns>
        ApiResponse<PricelistSetPriceListItemsResponse> PriceListSetPriceListItemsWithHttpInfo(PricelistSetPriceListItemsRequest body, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object PriceListUpdatePriceList(PricelistUpdatePriceListRequest body, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PriceListUpdatePriceListWithHttpInfo(PricelistUpdatePriceListRequest body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPriceListApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistCreatePriceListResponse</returns>
        System.Threading.Tasks.Task<PricelistCreatePriceListResponse> PriceListCreatePriceListAsync(PricelistCreatePriceListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistCreatePriceListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricelistCreatePriceListResponse>> PriceListCreatePriceListWithHttpInfoAsync(PricelistCreatePriceListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PriceListDeletePriceListItemsAsync(PricelistDeletePriceListItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PriceListDeletePriceListItemsWithHttpInfoAsync(PricelistDeletePriceListItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistGetFullPriceItemsResponse</returns>
        System.Threading.Tasks.Task<PricelistGetFullPriceItemsResponse> PriceListGetFullPriceItemsByPricelistIdAsync(PricelistGetFullPriceItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistGetFullPriceItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricelistGetFullPriceItemsResponse>> PriceListGetFullPriceItemsByPricelistIdWithHttpInfoAsync(PricelistGetFullPriceItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistGetPriceItemsByPriceListItemIdsResponse</returns>
        System.Threading.Tasks.Task<PricelistGetPriceItemsByPriceListItemIdsResponse> PriceListGetPriceItemsByPriceListItemIdsAsync(PricelistGetPriceItemsByPriceListItemIdsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistGetPriceItemsByPriceListItemIdsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricelistGetPriceItemsByPriceListItemIdsResponse>> PriceListGetPriceItemsByPriceListItemIdsWithHttpInfoAsync(PricelistGetPriceItemsByPriceListItemIdsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistGetPriceListResponse</returns>
        System.Threading.Tasks.Task<PricelistGetPriceListResponse> PriceListGetPriceListAsync(PricelistGetPriceListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistGetPriceListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricelistGetPriceListResponse>> PriceListGetPriceListWithHttpInfoAsync(PricelistGetPriceListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistGetPriceListByCodeResponse</returns>
        System.Threading.Tasks.Task<PricelistGetPriceListByCodeResponse> PriceListGetPriceListByCodeAsync(PricelistGetPriceListByCodeRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistGetPriceListByCodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricelistGetPriceListByCodeResponse>> PriceListGetPriceListByCodeWithHttpInfoAsync(PricelistGetPriceListByCodeRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistGetPriceListItemsResponse</returns>
        System.Threading.Tasks.Task<PricelistGetPriceListItemsResponse> PriceListGetPriceListItemsAsync(PricelistGetPriceListItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistGetPriceListItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricelistGetPriceListItemsResponse>> PriceListGetPriceListItemsWithHttpInfoAsync(PricelistGetPriceListItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistGetPricesResponse</returns>
        System.Threading.Tasks.Task<PricelistGetPricesResponse> PriceListGetPricesItemsAsync(PricelistGetPricesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistGetPricesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricelistGetPricesResponse>> PriceListGetPricesItemsWithHttpInfoAsync(PricelistGetPricesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistListFullPriceItemsResponse</returns>
        System.Threading.Tasks.Task<PricelistListFullPriceItemsResponse> PriceListListFullPriceItemsByPricelistIdAsync(PricelistListFullPriceItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistListFullPriceItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricelistListFullPriceItemsResponse>> PriceListListFullPriceItemsByPricelistIdWithHttpInfoAsync(PricelistListFullPriceItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistListPriceListsResponse</returns>
        System.Threading.Tasks.Task<PricelistListPriceListsResponse> PriceListListPriceListsAsync(PricelistListPriceListsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistListPriceListsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricelistListPriceListsResponse>> PriceListListPriceListsWithHttpInfoAsync(PricelistListPriceListsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistSetPriceListItemsResponse</returns>
        System.Threading.Tasks.Task<PricelistSetPriceListItemsResponse> PriceListSetPriceListItemsAsync(PricelistSetPriceListItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistSetPriceListItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricelistSetPriceListItemsResponse>> PriceListSetPriceListItemsWithHttpInfoAsync(PricelistSetPriceListItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PriceListUpdatePriceListAsync(PricelistUpdatePriceListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PriceListUpdatePriceListWithHttpInfoAsync(PricelistUpdatePriceListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPriceListApi : IPriceListApiSync, IPriceListApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PriceListApi : IPriceListApi
    {
        private pricelist.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PriceListApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PriceListApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PriceListApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PriceListApi(string basePath)
        {
            this.Configuration = pricelist.Client.Configuration.MergeConfigurations(
                pricelist.Client.GlobalConfiguration.Instance,
                new pricelist.Client.Configuration { BasePath = basePath }
            );
            this.Client = new pricelist.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new pricelist.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = pricelist.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PriceListApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PriceListApi(pricelist.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = pricelist.Client.Configuration.MergeConfigurations(
                pricelist.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new pricelist.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new pricelist.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = pricelist.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PriceListApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PriceListApi(pricelist.Client.ISynchronousClient client, pricelist.Client.IAsynchronousClient asyncClient, pricelist.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = pricelist.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public pricelist.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public pricelist.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public pricelist.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public pricelist.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistCreatePriceListResponse</returns>
        public PricelistCreatePriceListResponse PriceListCreatePriceList(PricelistCreatePriceListRequest body, int operationIndex = 0)
        {
            pricelist.Client.ApiResponse<PricelistCreatePriceListResponse> localVarResponse = PriceListCreatePriceListWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistCreatePriceListResponse</returns>
        public pricelist.Client.ApiResponse<PricelistCreatePriceListResponse> PriceListCreatePriceListWithHttpInfo(PricelistCreatePriceListRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->PriceListCreatePriceList");
            }

            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.PriceListCreatePriceList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PricelistCreatePriceListResponse>("/pricelist.PriceList/CreatePriceList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceListCreatePriceList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistCreatePriceListResponse</returns>
        public async System.Threading.Tasks.Task<PricelistCreatePriceListResponse> PriceListCreatePriceListAsync(PricelistCreatePriceListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricelist.Client.ApiResponse<PricelistCreatePriceListResponse> localVarResponse = await PriceListCreatePriceListWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistCreatePriceListResponse)</returns>
        public async System.Threading.Tasks.Task<pricelist.Client.ApiResponse<PricelistCreatePriceListResponse>> PriceListCreatePriceListWithHttpInfoAsync(PricelistCreatePriceListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->PriceListCreatePriceList");
            }


            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.PriceListCreatePriceList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PricelistCreatePriceListResponse>("/pricelist.PriceList/CreatePriceList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceListCreatePriceList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object PriceListDeletePriceListItems(PricelistDeletePriceListItemsRequest body, int operationIndex = 0)
        {
            pricelist.Client.ApiResponse<Object> localVarResponse = PriceListDeletePriceListItemsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public pricelist.Client.ApiResponse<Object> PriceListDeletePriceListItemsWithHttpInfo(PricelistDeletePriceListItemsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->PriceListDeletePriceListItems");
            }

            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.PriceListDeletePriceListItems";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pricelist.PriceList/DeletePriceListItems", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceListDeletePriceListItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PriceListDeletePriceListItemsAsync(PricelistDeletePriceListItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricelist.Client.ApiResponse<Object> localVarResponse = await PriceListDeletePriceListItemsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<pricelist.Client.ApiResponse<Object>> PriceListDeletePriceListItemsWithHttpInfoAsync(PricelistDeletePriceListItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->PriceListDeletePriceListItems");
            }


            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.PriceListDeletePriceListItems";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pricelist.PriceList/DeletePriceListItems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceListDeletePriceListItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistGetFullPriceItemsResponse</returns>
        public PricelistGetFullPriceItemsResponse PriceListGetFullPriceItemsByPricelistId(PricelistGetFullPriceItemsRequest body, int operationIndex = 0)
        {
            pricelist.Client.ApiResponse<PricelistGetFullPriceItemsResponse> localVarResponse = PriceListGetFullPriceItemsByPricelistIdWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistGetFullPriceItemsResponse</returns>
        public pricelist.Client.ApiResponse<PricelistGetFullPriceItemsResponse> PriceListGetFullPriceItemsByPricelistIdWithHttpInfo(PricelistGetFullPriceItemsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->PriceListGetFullPriceItemsByPricelistId");
            }

            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.PriceListGetFullPriceItemsByPricelistId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PricelistGetFullPriceItemsResponse>("/pricelist.PriceList/GetFullPriceItemsByPricelistId", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceListGetFullPriceItemsByPricelistId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistGetFullPriceItemsResponse</returns>
        public async System.Threading.Tasks.Task<PricelistGetFullPriceItemsResponse> PriceListGetFullPriceItemsByPricelistIdAsync(PricelistGetFullPriceItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricelist.Client.ApiResponse<PricelistGetFullPriceItemsResponse> localVarResponse = await PriceListGetFullPriceItemsByPricelistIdWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistGetFullPriceItemsResponse)</returns>
        public async System.Threading.Tasks.Task<pricelist.Client.ApiResponse<PricelistGetFullPriceItemsResponse>> PriceListGetFullPriceItemsByPricelistIdWithHttpInfoAsync(PricelistGetFullPriceItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->PriceListGetFullPriceItemsByPricelistId");
            }


            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.PriceListGetFullPriceItemsByPricelistId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PricelistGetFullPriceItemsResponse>("/pricelist.PriceList/GetFullPriceItemsByPricelistId", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceListGetFullPriceItemsByPricelistId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistGetPriceItemsByPriceListItemIdsResponse</returns>
        public PricelistGetPriceItemsByPriceListItemIdsResponse PriceListGetPriceItemsByPriceListItemIds(PricelistGetPriceItemsByPriceListItemIdsRequest body, int operationIndex = 0)
        {
            pricelist.Client.ApiResponse<PricelistGetPriceItemsByPriceListItemIdsResponse> localVarResponse = PriceListGetPriceItemsByPriceListItemIdsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistGetPriceItemsByPriceListItemIdsResponse</returns>
        public pricelist.Client.ApiResponse<PricelistGetPriceItemsByPriceListItemIdsResponse> PriceListGetPriceItemsByPriceListItemIdsWithHttpInfo(PricelistGetPriceItemsByPriceListItemIdsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->PriceListGetPriceItemsByPriceListItemIds");
            }

            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.PriceListGetPriceItemsByPriceListItemIds";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PricelistGetPriceItemsByPriceListItemIdsResponse>("/pricelist.PriceList/GetPriceItemsByPriceListItemIds", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceListGetPriceItemsByPriceListItemIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistGetPriceItemsByPriceListItemIdsResponse</returns>
        public async System.Threading.Tasks.Task<PricelistGetPriceItemsByPriceListItemIdsResponse> PriceListGetPriceItemsByPriceListItemIdsAsync(PricelistGetPriceItemsByPriceListItemIdsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricelist.Client.ApiResponse<PricelistGetPriceItemsByPriceListItemIdsResponse> localVarResponse = await PriceListGetPriceItemsByPriceListItemIdsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistGetPriceItemsByPriceListItemIdsResponse)</returns>
        public async System.Threading.Tasks.Task<pricelist.Client.ApiResponse<PricelistGetPriceItemsByPriceListItemIdsResponse>> PriceListGetPriceItemsByPriceListItemIdsWithHttpInfoAsync(PricelistGetPriceItemsByPriceListItemIdsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->PriceListGetPriceItemsByPriceListItemIds");
            }


            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.PriceListGetPriceItemsByPriceListItemIds";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PricelistGetPriceItemsByPriceListItemIdsResponse>("/pricelist.PriceList/GetPriceItemsByPriceListItemIds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceListGetPriceItemsByPriceListItemIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistGetPriceListResponse</returns>
        public PricelistGetPriceListResponse PriceListGetPriceList(PricelistGetPriceListRequest body, int operationIndex = 0)
        {
            pricelist.Client.ApiResponse<PricelistGetPriceListResponse> localVarResponse = PriceListGetPriceListWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistGetPriceListResponse</returns>
        public pricelist.Client.ApiResponse<PricelistGetPriceListResponse> PriceListGetPriceListWithHttpInfo(PricelistGetPriceListRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->PriceListGetPriceList");
            }

            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.PriceListGetPriceList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PricelistGetPriceListResponse>("/pricelist.PriceList/GetPriceList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceListGetPriceList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistGetPriceListResponse</returns>
        public async System.Threading.Tasks.Task<PricelistGetPriceListResponse> PriceListGetPriceListAsync(PricelistGetPriceListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricelist.Client.ApiResponse<PricelistGetPriceListResponse> localVarResponse = await PriceListGetPriceListWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistGetPriceListResponse)</returns>
        public async System.Threading.Tasks.Task<pricelist.Client.ApiResponse<PricelistGetPriceListResponse>> PriceListGetPriceListWithHttpInfoAsync(PricelistGetPriceListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->PriceListGetPriceList");
            }


            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.PriceListGetPriceList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PricelistGetPriceListResponse>("/pricelist.PriceList/GetPriceList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceListGetPriceList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistGetPriceListByCodeResponse</returns>
        public PricelistGetPriceListByCodeResponse PriceListGetPriceListByCode(PricelistGetPriceListByCodeRequest body, int operationIndex = 0)
        {
            pricelist.Client.ApiResponse<PricelistGetPriceListByCodeResponse> localVarResponse = PriceListGetPriceListByCodeWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistGetPriceListByCodeResponse</returns>
        public pricelist.Client.ApiResponse<PricelistGetPriceListByCodeResponse> PriceListGetPriceListByCodeWithHttpInfo(PricelistGetPriceListByCodeRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->PriceListGetPriceListByCode");
            }

            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.PriceListGetPriceListByCode";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PricelistGetPriceListByCodeResponse>("/pricelist.PriceList/GetPriceListByCode", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceListGetPriceListByCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistGetPriceListByCodeResponse</returns>
        public async System.Threading.Tasks.Task<PricelistGetPriceListByCodeResponse> PriceListGetPriceListByCodeAsync(PricelistGetPriceListByCodeRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricelist.Client.ApiResponse<PricelistGetPriceListByCodeResponse> localVarResponse = await PriceListGetPriceListByCodeWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistGetPriceListByCodeResponse)</returns>
        public async System.Threading.Tasks.Task<pricelist.Client.ApiResponse<PricelistGetPriceListByCodeResponse>> PriceListGetPriceListByCodeWithHttpInfoAsync(PricelistGetPriceListByCodeRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->PriceListGetPriceListByCode");
            }


            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.PriceListGetPriceListByCode";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PricelistGetPriceListByCodeResponse>("/pricelist.PriceList/GetPriceListByCode", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceListGetPriceListByCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistGetPriceListItemsResponse</returns>
        public PricelistGetPriceListItemsResponse PriceListGetPriceListItems(PricelistGetPriceListItemsRequest body, int operationIndex = 0)
        {
            pricelist.Client.ApiResponse<PricelistGetPriceListItemsResponse> localVarResponse = PriceListGetPriceListItemsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistGetPriceListItemsResponse</returns>
        public pricelist.Client.ApiResponse<PricelistGetPriceListItemsResponse> PriceListGetPriceListItemsWithHttpInfo(PricelistGetPriceListItemsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->PriceListGetPriceListItems");
            }

            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.PriceListGetPriceListItems";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PricelistGetPriceListItemsResponse>("/pricelist.PriceList/GetPriceListItems", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceListGetPriceListItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistGetPriceListItemsResponse</returns>
        public async System.Threading.Tasks.Task<PricelistGetPriceListItemsResponse> PriceListGetPriceListItemsAsync(PricelistGetPriceListItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricelist.Client.ApiResponse<PricelistGetPriceListItemsResponse> localVarResponse = await PriceListGetPriceListItemsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistGetPriceListItemsResponse)</returns>
        public async System.Threading.Tasks.Task<pricelist.Client.ApiResponse<PricelistGetPriceListItemsResponse>> PriceListGetPriceListItemsWithHttpInfoAsync(PricelistGetPriceListItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->PriceListGetPriceListItems");
            }


            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.PriceListGetPriceListItems";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PricelistGetPriceListItemsResponse>("/pricelist.PriceList/GetPriceListItems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceListGetPriceListItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistGetPricesResponse</returns>
        public PricelistGetPricesResponse PriceListGetPricesItems(PricelistGetPricesRequest body, int operationIndex = 0)
        {
            pricelist.Client.ApiResponse<PricelistGetPricesResponse> localVarResponse = PriceListGetPricesItemsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistGetPricesResponse</returns>
        public pricelist.Client.ApiResponse<PricelistGetPricesResponse> PriceListGetPricesItemsWithHttpInfo(PricelistGetPricesRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->PriceListGetPricesItems");
            }

            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.PriceListGetPricesItems";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PricelistGetPricesResponse>("/pricelist.PriceList/GetPricesItems", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceListGetPricesItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistGetPricesResponse</returns>
        public async System.Threading.Tasks.Task<PricelistGetPricesResponse> PriceListGetPricesItemsAsync(PricelistGetPricesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricelist.Client.ApiResponse<PricelistGetPricesResponse> localVarResponse = await PriceListGetPricesItemsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistGetPricesResponse)</returns>
        public async System.Threading.Tasks.Task<pricelist.Client.ApiResponse<PricelistGetPricesResponse>> PriceListGetPricesItemsWithHttpInfoAsync(PricelistGetPricesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->PriceListGetPricesItems");
            }


            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.PriceListGetPricesItems";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PricelistGetPricesResponse>("/pricelist.PriceList/GetPricesItems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceListGetPricesItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistListFullPriceItemsResponse</returns>
        public PricelistListFullPriceItemsResponse PriceListListFullPriceItemsByPricelistId(PricelistListFullPriceItemsRequest body, int operationIndex = 0)
        {
            pricelist.Client.ApiResponse<PricelistListFullPriceItemsResponse> localVarResponse = PriceListListFullPriceItemsByPricelistIdWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistListFullPriceItemsResponse</returns>
        public pricelist.Client.ApiResponse<PricelistListFullPriceItemsResponse> PriceListListFullPriceItemsByPricelistIdWithHttpInfo(PricelistListFullPriceItemsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->PriceListListFullPriceItemsByPricelistId");
            }

            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.PriceListListFullPriceItemsByPricelistId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PricelistListFullPriceItemsResponse>("/pricelist.PriceList/ListFullPriceItemsByPricelistId", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceListListFullPriceItemsByPricelistId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistListFullPriceItemsResponse</returns>
        public async System.Threading.Tasks.Task<PricelistListFullPriceItemsResponse> PriceListListFullPriceItemsByPricelistIdAsync(PricelistListFullPriceItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricelist.Client.ApiResponse<PricelistListFullPriceItemsResponse> localVarResponse = await PriceListListFullPriceItemsByPricelistIdWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistListFullPriceItemsResponse)</returns>
        public async System.Threading.Tasks.Task<pricelist.Client.ApiResponse<PricelistListFullPriceItemsResponse>> PriceListListFullPriceItemsByPricelistIdWithHttpInfoAsync(PricelistListFullPriceItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->PriceListListFullPriceItemsByPricelistId");
            }


            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.PriceListListFullPriceItemsByPricelistId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PricelistListFullPriceItemsResponse>("/pricelist.PriceList/ListFullPriceItemsByPricelistId", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceListListFullPriceItemsByPricelistId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistListPriceListsResponse</returns>
        public PricelistListPriceListsResponse PriceListListPriceLists(PricelistListPriceListsRequest body, int operationIndex = 0)
        {
            pricelist.Client.ApiResponse<PricelistListPriceListsResponse> localVarResponse = PriceListListPriceListsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistListPriceListsResponse</returns>
        public pricelist.Client.ApiResponse<PricelistListPriceListsResponse> PriceListListPriceListsWithHttpInfo(PricelistListPriceListsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->PriceListListPriceLists");
            }

            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.PriceListListPriceLists";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PricelistListPriceListsResponse>("/pricelist.PriceList/ListPriceLists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceListListPriceLists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistListPriceListsResponse</returns>
        public async System.Threading.Tasks.Task<PricelistListPriceListsResponse> PriceListListPriceListsAsync(PricelistListPriceListsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricelist.Client.ApiResponse<PricelistListPriceListsResponse> localVarResponse = await PriceListListPriceListsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistListPriceListsResponse)</returns>
        public async System.Threading.Tasks.Task<pricelist.Client.ApiResponse<PricelistListPriceListsResponse>> PriceListListPriceListsWithHttpInfoAsync(PricelistListPriceListsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->PriceListListPriceLists");
            }


            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.PriceListListPriceLists";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PricelistListPriceListsResponse>("/pricelist.PriceList/ListPriceLists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceListListPriceLists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricelistSetPriceListItemsResponse</returns>
        public PricelistSetPriceListItemsResponse PriceListSetPriceListItems(PricelistSetPriceListItemsRequest body, int operationIndex = 0)
        {
            pricelist.Client.ApiResponse<PricelistSetPriceListItemsResponse> localVarResponse = PriceListSetPriceListItemsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricelistSetPriceListItemsResponse</returns>
        public pricelist.Client.ApiResponse<PricelistSetPriceListItemsResponse> PriceListSetPriceListItemsWithHttpInfo(PricelistSetPriceListItemsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->PriceListSetPriceListItems");
            }

            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.PriceListSetPriceListItems";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PricelistSetPriceListItemsResponse>("/pricelist.PriceList/SetPriceListItems", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceListSetPriceListItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricelistSetPriceListItemsResponse</returns>
        public async System.Threading.Tasks.Task<PricelistSetPriceListItemsResponse> PriceListSetPriceListItemsAsync(PricelistSetPriceListItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricelist.Client.ApiResponse<PricelistSetPriceListItemsResponse> localVarResponse = await PriceListSetPriceListItemsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricelistSetPriceListItemsResponse)</returns>
        public async System.Threading.Tasks.Task<pricelist.Client.ApiResponse<PricelistSetPriceListItemsResponse>> PriceListSetPriceListItemsWithHttpInfoAsync(PricelistSetPriceListItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->PriceListSetPriceListItems");
            }


            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.PriceListSetPriceListItems";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PricelistSetPriceListItemsResponse>("/pricelist.PriceList/SetPriceListItems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceListSetPriceListItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object PriceListUpdatePriceList(PricelistUpdatePriceListRequest body, int operationIndex = 0)
        {
            pricelist.Client.ApiResponse<Object> localVarResponse = PriceListUpdatePriceListWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public pricelist.Client.ApiResponse<Object> PriceListUpdatePriceListWithHttpInfo(PricelistUpdatePriceListRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->PriceListUpdatePriceList");
            }

            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.PriceListUpdatePriceList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pricelist.PriceList/UpdatePriceList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceListUpdatePriceList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PriceListUpdatePriceListAsync(PricelistUpdatePriceListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricelist.Client.ApiResponse<Object> localVarResponse = await PriceListUpdatePriceListWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="pricelist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<pricelist.Client.ApiResponse<Object>> PriceListUpdatePriceListWithHttpInfoAsync(PricelistUpdatePriceListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new pricelist.Client.ApiException(400, "Missing required parameter 'body' when calling PriceListApi->PriceListUpdatePriceList");
            }


            pricelist.Client.RequestOptions localVarRequestOptions = new pricelist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricelist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricelist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PriceListApi.PriceListUpdatePriceList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pricelist.PriceList/UpdatePriceList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceListUpdatePriceList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
